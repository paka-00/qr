import cv2
import numpy as np
import copy

G_256=[1,2,4,8,16,32,64,128,
    0b00011101,0b00111010,0b01110100,0b11101000,0b11001101,0b10000111,0b00010011,0b00100110,
    0b01001100,0b10011000,0b00101101,0b01011010,0b10110100,0b01110101,0b11101010,0b11001001,
    0b10001111,0b00000011,0b00000110,0b00001100,0b00011000,0b00110000,0b01100000,0b11000000,
    0b10011101,0b00100111,0b01001110,0b10011100,0b00100101,0b01001010,0b10010100,0b00110101,
    0b01101010,0b11010100,0b10110101,0b01110111,0b11101110,0b11000001,0b10011111,0b00100011,
    0b01000110,0b10001100,0b00000101,0b00001010,0b00010100,0b00101000,0b01010000,0b10100000,
    0b01011101,0b10111010,0b01101001,0b11010010,0b10111001,0b01101111,0b11011110,0b10100001,#64
    0b01011111,0b10111110,0b01100001,0b11000010,0b10011001,0b00101111,0b01011110,0b10111100,#72
    0b01100101,0b11001010,0b10001001,0b00001111,0b00011110,0b00111100,0b01111000,0b11110000,#80
    0b11111101,0b11100111,0b11010011,0b10111011,0b01101011,0b11010110,0b10110001,0b01111111,#88
    0b11111110,0b11100001,0b11011111,0b10100011,0b01011011,0b10110110,0b01110001,0b11100010,#96
    0b11011001,0b10101111,0b01000011,0b10000110,0b00010001,0b00100010,0b01000100,0b10001000,
    0b00001101,0b00011010,0b00110100,0b01101000,0b11010000,0b10111101,0b01100111,0b11001110,
    0b10000001,0b00011111,0b00111110,0b01111100,0b11111000,0b11101101,0b11000111,0b10010011,
    0b00111011,0b01110110,0b11101100,0b11000101,0b10010111,0b00110011,0b01100110,0b11001100,
    0b10000101,0b00010111,0b00101110,0b01011100,0b10111000,0b01101101,0b11011010,0b10101001,
    0b01001111,0b10011110,0b00100001,0b01000010,0b10000100,0b00010101,0b00101010,0b01010100,
    0b10101000,0b01001101,0b10011010,0b00101001,0b01010010,0b10100100,0b01010101,0b10101010,
    0b01001001,0b10010010,0b00111001,0b01110010,0b11100100,0b11010101,0b10110111,0b01110011,
    0b11100110,0b11010001,0b10111111,0b01100011,0b11000110,0b10010001,0b00111111,0b01111110,#167
    0b11111100,0b11100101,0b11010111,0b10110011,0b01111011,0b11110110,0b11110001,0b11111111,
    0b11100011,0b11011011,0b10101011,0b01001011,0b10010110,0b00110001,0b01100010,0b11000100,
    0b10010101,0b00110111,0b01101110,0b11011100,0b10100101,0b01010111,0b10101110,0b01000001,
    0b10000010,0b00011001,0b00110010,0b01100100,0b11001000,0b10001101,0b00000111,0b00001110,
    0b00011100,0b00111000,0b01110000,0b11100000,0b11011101,0b10100111,0b01010011,0b10100110,
    0b01010001,0b10100010,0b01011001,0b10110010,0b01111001,0b11110010,0b11111001,0b11101111,
    0b11000011,0b10011011,0b00101011,0b01010110,0b10101100,0b01000101,0b10001010,0b00001001,
    0b00010010,0b00100100,0b01001000,0b10010000,0b00111101,0b01111010,0b11110100,0b11110101,
    0b11110111,0b11110011,0b11111011,0b11101011,0b11001011,0b10001011,0b00001011,0b00010110,
    0b00101100,0b01011000,0b10110000,0b01111101,0b11111010,0b11101001,0b11001111,0b10000011,
    0b00011011,0b00110110,0b01101100,0b11011000,0b10101101,0b01000111,0b10001110,0b00000000]


def gf_add(p,a,b):
    return (a+b)%p

def gf_sub(p,a,b):
    if (a-b)<0:
        return (a-b+p)%p
    else:
        return (a-b)%p

def gf_mul(p,a,b):
    return (a*b)%p

def ex_euclid(x, y):
    c0, c1 = x, y
    a0, a1 = 1, 0
    b0, b1 = 0, 1

    while c1 != 0:
        m = c0 % c1
        q = c0 // c1

        c0, c1 = c1, m
        a0, a1 = a1, (a0 - q * a1)
        b0, b1 = b1, (b0 - q * b1)

    return b0

def gf_div(a,b,p):#a/b mod p
    t=ex_euclid(p,b)
    t=t%p
    return (a*t)%p

def qr_create(m):
    height = 21
    width = 21
    blank = np.zeros((height, width))
    blank[2]= 255 #←全ゼロデータに255を足してホワイトにする
    return blank#配列返す

def modulo(galoa,G_e):
    regaloa=copy.copy(galoa)
    t=0
    sub=len(regaloa)-len(G_e)
    while t<=sub:
        s=regaloa[0]
        #print(s)
        reG=[]
        for i in G_e:
            reG.append((i+s)%255)
        for i in range(sub-t):
            reG.append(255)
        #print(reG,regaloa)
        galoa=[]
        for i in range(len(reG)):
            galoa.append(G_256.index(G_256[regaloa[i]]^G_256[reG[i]]))
        galoa.pop(0)
        regaloa=copy.copy(galoa)
        t+=1
    return regaloa


message='幸山直人'
m=message.encode('shift_jis').hex()
split_m = [m[i: i+4] for i in range(0, len(m), 4)]
int_m=[int(i,16) for i in split_m]
#print(int_m)
bit_m=[] 
for i in int_m:
    if i>=0x8140 and i<=0x9ffc:
        i-=0x8140
    elif i>=0xe040 and i <=0xebbf:
        i-=0xc140
    i=format(i,'#06x')[2:]
    
    bit_m.append(int(i[:2],16)*0xc0+int(i[2:],16))
bit_m=[format(i,'#015b')[2:] for i in bit_m]

bit_m.insert(0,format(len(message),'#010b')[2:])
bit_m.insert(0,'1000')
bit_m.append('0000')
bit=''
for i in bit_m:
    bit+=i
split_bit = [bit[i: i+8] for i in range(0, len(bit), 8)]
split_bit[len(split_bit)-1]=split_bit[len(split_bit)-1].zfill(8)

while len(split_bit)<19:
    split_bit.append("11101100")
    if len(split_bit)>=19:
        break
    else:
        split_bit.append("00010001")
#print(split_bit)
galoa=[]
for i in split_bit:
    galoa.append(G_256.index(int(i,2)))

#print(galoa)
G_e=[0,87,229,146,149,238,102,21]

code=copy.copy(galoa)
for i in range(7):
    galoa.append(255)

R=modulo(galoa,G_e)

code=code+R
print(code)
bitcode=[]
for i in code:
    bitcode.append(format(G_256[i],'#010b')[2:])
print(bitcode)

